:title: Relais code style guidelines for Ruby

= First principles

* Be readable: Writing code is fast. Debugging code is slow. `Code is read far
  more times than it is written <guido>`__. Therefore we should ensure that code
  is easy to read at the expense of taking longer to write it.

* Be clear: Explicit is better than implicit. In the face of ambiguity, refuse
  the temptation to guess. There should be one -- and preferably only one
  -- obvious and good way to do it.

* Be simple: If the implementation is hard to explain, it's probably a bad idea.
  If the implementation is easy to explain, it may be a good idea.

* Be memorable: Consistency is good. Meeting expectations is good. Code and
  APIs that are easy to learn and understand are those that behave the way you
  expect them to.
  
* Be reasonable: `A foolish consistency is the hobgoblin of small minds <>`__.
  If style interferes with the *functionality* of code, style must give way.
  
* Be useful: Always remember, we are here to get stuff done. 


= Overall formatting

Use Unix-style line endings. Use UTF-8 encoding. Enforce this with editor hash
line at the top of the file::

  # -- utf8 TODO

*Rationale: Strange encodings and end-of-line markers can cause strange errors
in editors and interpretors. But everything understand utf8 and newline.*
 
Indent appropriately and widely. Be consistent. Use tabs *or* spaces for
indenting, but not both.

*Rationale: This gives a consistent level of relative indenting / nesting
regardless of local editor settings and lets the code be easily.*

Keep lines fewer than 80 characters. Keep identifiers less than than 16 characters
and ideally less than 8.

*Rationale: I shouldn't have to scroll a window across to see that the line ends
"unless ...". Also, lines that are longer than 80 characters are a sign that 
either you're trying to do too much in one line or your variable names are
far too long.*

Individual function should be no more than a screenful and within that should be
broke up into sections of 5-7 lines. Use two lines between major code sections
(e.g. classes) to distinguish these breaks from internal spacing.

*Rationale: Suggested by readability studies.*


= General code formatting
 
Use spaces around operators, after commas, colons and semicolons, around { and
before }. No spaces before or after (, ), [, ], except where doing multiline
lists or hashes.

*Rationale: Suggested by readability studies and required by Ruby's braindead
parser.*

 
* Indent when as deep as case.
 
Return values should be clearly indicated. Either use "return" (frowned upon by
most Ruby users) or place an empty line before the implicit return value.

Ruby allows you to do a lot of things implicitly: unamed parameters and blocks,
implcit returns, etc. Don't.

 
* Avoid trailing whitespace.

* It's often handy  to seperate include statements into groups depending on
  their source. These groups are standard libraries, third-party or external
  libraries and files within the project. So witin the "FooServer" project::

	# standard libraries
   require 'csv'
   require 'wrap'

	# 3rd party
	require 'bio'
   require 'elementtree'

	# the local project
   require 'fooserver.middleware'
   require 'textutils'


Use "||" instead of "or".

*Rationale: "||" works like you expect, whereas "or" sometimes doesn't,
depending on context. See `here <TODO>`__.*

Optional function parameters should always be passed in a hash as the final
argument - even if there is only one - using an idiom like this::

	def myfunc(arg1, arg2, kwargs={})
		options = {
			:foo => 3,
			:bar => true,
		}.merge(kwargs)

*Rationale: Ruby's mapping of the parameters passed in to arguments gets super
messy if you interleave named and unamed arguments or want to pass in some but
not all unamed arguments. By using the Rails-style final hash, we get clarity,
consistency and the ability to use any combination of optional arguments. It is
tempting to eschew the hash if there is only one optional argument, but if
another optional parameter has to be added later, the function signature will
get ugly:*

	# tempting but wrong
	def wraptext(str, width=60)
	
	# when more parameters are added
	def wraptext(str, width=60, strip_newlines=true)
	def wraptext(str, width=60, options={})
	
	# better solution
	def wraptext(str, options={})

Use `Yard <http://yardoc.org>`__ for documentation. A useful template is:

	# Short description of function.
	#
	# @param [types] param1 A description of param1.
	# @param [types] param2 A description of param2.
	#
	# @return A description of return values.
	#
	# A more detailed description.
	#
	# @example
	#   myfunc(1, 2) => 3
	#
	def myfunc(param1, param2)
		...

*Rationale: Yard's syntax is slightly awkward and requires some discipline and
consistency to use, but the output is far more consistent and organised that the
usual RDoc.*


= Miscellaneous

When in doubt about the right level of access restriction (e.g. private vs.
protected), maybe you should defer the decision and leave it all public.

*Rationale: Make the access too restrictive and you make it hard for your users,
encourage them to duplicate functionality or hack around your restrictions.
Better to be too lax and maybe tighten up later, although this has problem that
it may invalidate working code. As an alternative, Python's idea of policy for
security (i.e. "only use this if you have to and know what you're doing") works
well for most cases.*

An API isn't correct and hasn't been tested until it has been used in anger.


= References

* `Ruby guide <http://www.caliban.org/ruby/rubyguide.shtml>`__

* Christian Neukirchen `Ruby Style Guide
  <http://github.com/chneukirchen/styleguide/blob/master/RUBY-STYLE>`__

* Benjamin Kudria `Ruby style guide <http://github.com/bkudria/styleguide>`__

* Guido van Rossum `PEP 8 - Style guide for Python code
  <http://www.python.org/dev/peps/pep-0008/>`__

* Tim Peters `PEP 20 - The Zen of Python
  <http://www.python.org/dev/peps/pep-0020/>`__



